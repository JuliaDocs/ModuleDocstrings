var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ModuleDocstrings","category":"page"},{"location":"#ModuleDocstrings","page":"Home","title":"ModuleDocstrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package aims to make it easier to attach a docstring to a module, providing users with a quick summary of the core functionality in a package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To demonstrate, let's create a module with a few docstrings. This module has two functions: radius with a single method, and distance with two methods (the details of the methods don't really matter much for this demonstration):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> module TestDocStrings\n       \n       export radius, distance\n       \n       \"\"\"\n           radius(x, y, z)\n       \n       Compute the radius of the cartesian-coordinate position `[x, y, z]`.\n       \n       There really isn't much more to say; it's pretty straightforward.\n       \"\"\"\n       radius(x, y, z) = sqrt(x^2 + y^2 + z^2)\n       \n       \n       \"\"\"\n           distance(pos1::AbstractVector, pos2::AbstractVector)\n       \n       Compute the distance between points `pos1` and `pos2`.\n       \"\"\"\n       distance(pos1::AbstractVector, pos2::AbstractVector) = radius((pos1 - pos2)...)\n       \n       \"\"\"\n           distance(pos::AbstractVector, points::PointCollection)\n       \n       Compute the minimum distance between `pos` and any point in `points`.\n       \"\"\"\n       distance(pos::AbstractVector, points::AbstractVector{<:AbstractVector}) = minimum(p -> distance(pos, p), points)\n       \n       end\nTestDocStrings","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now let's generate a module doctring:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ModuleDocstrings\n\njulia> print(ModuleDocstrings.generate(TestDocStrings))\n- `distance`:\n  + Compute the minimum distance between `pos` and any point in `points`.\n  + Compute the distance between points `pos1` and `pos2`.\n- `radius`: Compute the radius of the cartesian-coordinate position `[x, y, z]`.","category":"page"},{"location":"","page":"Home","title":"Home","text":"From this, you can see that both methods of distance are listed, as well as the single method for radius.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If this were a package that you have in Pkg.develop mode, you could insert this string into the package with ModuleDocstrings.write.  However, in this case, you get","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ModuleDocstrings.write(TestDocStrings)\nERROR: TestDocStrings must be a writable package, but there is no corresponding file, suggesting it wasn't loaded from a package.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] error_write(mod::Module, #unused#::Nothing)\n   @ ModuleDocstrings ~/.julia/dev/ModuleDocstrings/src/ModuleDocstrings.jl:101\n [3] write(mod::Module, str::String)\n   @ ModuleDocstrings ~/.julia/dev/ModuleDocstrings/src/ModuleDocstrings.jl:79\n [4] write(mod::Module)\n   @ ModuleDocstrings ~/.julia/dev/ModuleDocstrings/src/ModuleDocstrings.jl:96\n [5] top-level scope\n   @ none:1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This error ocurred because we defined the module at the REPL; it will likewise error if you have Pkg.added rather than Pkg.developed.  But for a package checked out in develop mode it will modify the main package file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nBe sure you've saved any work before running ModuleDocstrings.write.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generally speaking, you should then edit the docstring to trim any methods that don't merit a mention in the summary, and/or to improve the clarity, brevity, or organization of the summaries.  Sometimes, you may discover that you can improve the original source docstring as well.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Your changes can then be submitted as a pull request.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ModuleDocstrings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ModuleDocstrings.generate\nModuleDocstrings.write","category":"page"},{"location":"#ModuleDocstrings.generate","page":"Home","title":"ModuleDocstrings.generate","text":"ModuleDocstrings.generate(mod::Module)\n\nReturn an API summary string for mod.\n\nThe summary is assembled from all docstrings in the package, picking the first sentence of each docstring. When added to the package (see ModuleDocstrings.write), you should expect to make edits by hand:\n\nexclude docstrings that shouldn't appear in the API summary\nrephrase summaries for greater clarity or compactness (alternatively, consider making such changes to the original docstring)\n\n\n\n\n\n","category":"function"},{"location":"#ModuleDocstrings.write","page":"Home","title":"ModuleDocstrings.write","text":"ModuleDocstrings.write(mod, str)\n\nEdit the module-defining file to insert str as a docstring for mod.\n\nThe package should be checked out in develop mode before calling write.\n\n\n\n\n\nModuleDocstrings.write(mod)\n\nModify the source file for mod to add an API summary docstring.\n\nThe docstring is produced by ModuleDocstrings.generate. The package should be checked out in develop mode before calling write.\n\n\n\n\n\n","category":"function"}]
}
